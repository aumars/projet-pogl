@startuml
title L'Île Interdite - Diagramme de classe

interface Observable
Observable <-[dashed]- Modele
Observable <-[dashed]- Controleur
interface Observer
Observer <-[dashed]- Vue

Modele "1" -- "1" Vue
Modele "1" -- "1" Controleur

package Modele {
    enum Inondation {
        SECHE
        INONDEE
        SUBMERGEE
    }

    enum Direction {
        HAUT
        BAS
        GAUCHE
        DROITE
    }

    enum Element {
        AIRE
        EAU
        TERRE
        FEU
    }

    enum Terrain {
        TERRE
        MER
        HELIPAD
    }

    abstract class Objet {
        +element: Element
        +objetByID(String, Element): Objet
    }

    Objet <-- Artefact
    Objet <-- Clef

    class Coord {
        -x: int
        -y: int
        +x(): int
        +y(): int
        +toString(): String
        +equals(Object): boolean
        +hashCode(): int
    }

    class Case {
        +terrain: Terrain /' CONSTANTE '/
        -etat: Inondation
        -objetVisibilite: boolean
        +restart(): void
        +setJoueur(Joueur): void
        +removeJoueur(Joueur): void
        +getJoueurs(): List<Joueurs>
        +estTraversable(): boolean
        +estHelipad(): boolean
        +ajoutObjet(Objet): void
        +aObjet(): boolean
        +aObjet(Class): boolean
        +getObjet(): Objet
        +getObjetVisibilite(): boolean
        +setObjetVisibilite(boolean): void
        +detruitObjet(): void
        +getEtat(): Inondation
        +setEtat(Inondation): void
        +asseche(): boolean
        +monteEaux(): void
        +adjacent(Direction): Case
        +adjacentSubmergee(): boolean
    }
    Case "0..n" o-- "1" Coord /' Case est associé à un Coord '/
    Case "0..n" o-- "0..1" Objet /' Case est associé à un Objet '/
    Case "0..n" *--o "0..1" Grille /' Case appartient à une Grille '/

    class Grille {
        -HEIGHT: int
        -WIDTH: int
        +restart(): void
        +addObjet(AbstractMap.SimpleImmutableEntry<Objet, Coord>): void
        +addObjets(List<AbstractMap.SimpleImmutableEntry<Objet, Coord>> objets): void
        +getWidth(): int
        +getHauteur(): int
        +getCase(int, int): Case
        +getCase(Coord): Case
        +inonde(): void
    }

    class Joueur {
      -vivant: boolean
      -endTurn: boolean
      -numJoueur: int
      +id: int
      +name: String
      -actionSpeciale: boolean
      -casesSurvecuesConsecutives: int
      +restart(): void
      -log(String): void
      +noie()
      +estVivant(): boolean
      +estSonTour(): boolean
      +finishTurn(): void
      +newTurn(): void
      +gagneActionSpeciale(): void
      +aActionSpeciale(): boolean
      +deplace(Direction): void
      +possedeClef(Element): boolean
      +prendObjet(Objet): void
      +getInventaire(): List<Objet>
      +getCoord(): Coord
      +asseche(Direction): void
      +asseche(Case): void
      +teleport(Case): void
      +helicoptere(Case): void
      +setPosInitiale(Case): void
      +surCaseTraversable(): boolean
      +surHelipad(): boolean
    }
    Objet "0..n" o-- "0..1" Joueur
    Case "0..1" o-- "0..4" Joueur /' A modifier avec la liste de joueurs dans une case '/

    class Carte {
        -terrainByID(char): Terrain /' Méthode statique '/
    }

    class Jeu {
        -parseGame(String): org.w3c.dom.Document
        -parseGameObjet(org.w3c.dom.Document): List<AbstractMap.SimpleImmutableEntry<Objet, Coord>
        -parseGameJoueur(org.w3c.dom.Document): List<AbstractMap.SimpleImmutableEntry<Joueur, Coord>
        -parsePosition(org.w3c.dom.NodeList): Coord
        -elementById(String): Element
        -objetsByID(String, Element): Objet
        -joueurById(String): Joueur
    }
    Jeu "0..1" *-- "0..n" Objet
    Jeu "0..1" *-- "0..n" Coord
    Jeu "0..1" *-- "0..n" Joueur

    class Modele {
        -finJeu: boolean
        -remplitIle(): void
        +restart(): void
        +getJoueurActuel(): Joueur
        +getNbJoueurs(): int
        +tourSuivant(): void
        +getTour(): int
        +getGrille(): Grille
        +verifieGagnants(): boolean
        -tousJoueursSurHelipad(): boolean
        -tousArtefactsRecuperes(): boolean
        +prochainJoueurVivant(): Joueur
        +tousJoueursMorts(): boolean
        +tourPeutfinir(): boolean
        +getFinJeu(): boolean
    }
    Modele "0..1" *-- "1" Grille
    Modele "0..1" o-- "0..n" Joueur
}

package Controleur {
    class Controleur {
      +demarrer(): void
      +tourSuivant(): void
      +seDeplacer(): void
    }
}

package Vue {
    class Vue
    Vue "1" -- "1" Controleur

    class VueGrille{
      +afficheGrille(): void
    }
    Vue "1" *-- "1" VueGrille

    class VueCase{
      +afficheCase(): void
    }
    VueGrille "1" *-- "n*n" VueCase

    class VueCommande
    Vue "1" *- "1" VueCommande

    class VueBouton
    Vue "1" *-- "0..n" VueBouton
}
@enduml