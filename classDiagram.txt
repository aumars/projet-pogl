@startuml
title L'Île Interdite - Diagramme de classe

package javax.Swing {
    class JPanel
    class JLabel
    class JButton
}

package java.util {
    interface ActionListener
    interface KeyListener
    interface MouseListener
    interface MouseMotionListener
}

class IleInterdite {
    {static} + main(): void
}
IleInterdite "1" *-- "1" Modele
IleInterdite "1" *-- "1" Vue
IleInterdite "1" *-- "1" Controleur

package Modele {
    abstract class Observable {
        -OBSERVERS: List<Observer>
        +Observable()
        +addObserver(Observer): void
    }

    enum Inondation {
        SECHE
        INONDEE
        SUBMERGEE
    }

    enum Direction {
        HAUT
        BAS
        GAUCHE
        DROITE
        NEUTRE
        +toString(): String
    }

    enum Element {
        AIRE
        EAU
        TERRE
        FEU
        +toString(): String
    }

    enum Terrain {
        TERRE
        MER
        HELIPAD
    }

    enum Difficulte {
        DETERMINISTE
        FACILE
        MOYEN
        DIFFICILE
    }

    abstract class Objet {
        -ELEMENT: element
        +Objet(Element)
        {abstract} +toString(): String
    }

    class Artefact extends Objet{
        +Artefact(Element)
        +toString(): String
    }

    class Clef extends Objet {
        +Clef(Element)
        +toString(): String
    }

    class Coord {
        -x: int
        -y: int
        +Coord(int, int)
        +x(): int
        +y(): int
        +toString(): String
        +equals(Object): boolean
        +hashCode(): int
        +adjacent(Direction): Coord
        +estAdjacent(Coord): boolean
        +adjacentDir(Coord): Direction
    }

    class Case {
        +COORD: Coord
        +TERRAIN: Terrain
        -GRILLE: Grille
        -JOUEURS: List<Joueur>
        -etat: Inondation
        -objet: Objet
        -objetVisibilite: boolean
        +Case(Coord, Terrain, Grille)
        +restart(): void
        +setJoueur(Joueur): void
        +removeJoueur(Joueur): void
        +getJoueurs(): List<Joueur>
        +toString(): String
        +estTraversable(): boolean
        +estHelipad(): boolean
        +ajoutObjet(Objet): void
        +aObjet(): boolean
        +aObjet(Class<?>): boolean
        +getObjet(): Objet
        +getObjetVisibilite(): boolean
        +setObjetVisibilite(boolean): void
        +detruitObjet(): void
        +getEtat(): Inondation
        +setEtat(Inondation): void
        +asseche(): boolean
        +monteEaux(): void
        +adjacent(Direction): Case
        +adjacentSubmergee(): boolean
    }
    Case "0..1" o-- "1" Coord /' Case est associé à un Coord '/
    Case "0..1" -- "0..1" Objet /' Case est associé à un Objet '/

    class Grille {
        -CASES: Case[][]
        -ILE: Liste<Case>
        -HEIGHT: int
        -WIDTH: int
        +Grille(Terrain[][])
        +Grille(Terrain[][], List<SimpleImmutableEntry<Objet, Coord>>)
        -remplitIle(): void
        +restart(): void
        +addObjet(SimpleImmutableEntry<Objet, Coord>)
        +addObjet(Objet, Coord)
        +addObjets(List<SimpleImmutableEntry<Objet, Coord>>)
        +getWidth(): int
        +getHeight(): int
        +getCase(int, int): Case
        +getCase(Coord): Case
        +inonde(): void
    }
    Grille "1" *-- "Case"

    class Joueur {
        {static} -AVATARS: String[]
        {static} -numJoueurs: int
        +ID: int
        -INVENTAIRE: List<Objet>
        -vivant: boolean
        -pos: Case
        -posInitiale: Case
        -sonTour: boolean
        -actionSpeciale: boolean
        -casesSurvecuesConsecutives: int
        -probaClefInondation: double
        -log: String
        -actions: int
        +Joueur()
        +Joueur(Case)
        +restart(): void
        +toString(): String
        -log(String): void
        +setProbaClefInondation(double): void
        +meurt(): void
        +revive(): void
        +noie(): void
        +estVivant(): boolean
        +estSonTour(): boolean
        +finishTurn(): void
        +newTurn(): void
        +nbActions(): int
        +peutFaireAction(): boolean
        -finishAction(): void
        -gagneActionSpeciale(): void
        -finishActionSpeciale(): void
        +aActionSpeciale(): boolean
        +deplace(Direction): boolean
        +possedeClef(Element): boolean
        -prendObjet(): Objet
        +getInventaire(): List<Objet>
        +getCoord(): Coord
        +asseche(Direction): void
        +asseche(Case): void
        +recupereArtefact(): Objet
        +chercheCle(): Objet
        +teleport(Case): void
        +helicoptere(Case): void
        +setPosInitiale(Case): void
        +surCaseTraversable(): boolean
        +surHelipad(): boolean
        +getLogString(): String
    }
    Joueur "1" -- "0..n" Objet
    Case "0..1" -- "0..4" Joueur /' A modifier avec la liste de joueurs dans une case '/

    class Carte {
        +GRILLE: Grille
        +Carte(String)
        {static} -terrainByID(char): Terrain
    }
    Carte "1" *-- "1" Grille

    class Jeu {
        +OBJETS: List<SimpleImmutableEntry<Objet, Coord>>
        +ENSEMBLE: List<SimpleImmutableEntry<Joueur, Coord>>
        +Jeu(String)
        +Jeu(String, boolean)
        {static} -parseGame(String): Document
        {static} -parseGameObjet(Document}: List<SimpleImmutableEntry<Objet, Coord>>
        {static} -parseGameJoueur(Document): List<SimpleImmutableEntry<Joueur, Coord>>
        {static} -parsePosition(NodeList): Coord
        {static} -elementById(String): Element
        {static} -objetsByID(String): Objet
        {static} -joueurById(String): Joueur
    }
    Jeu "1" *-- "0..n" Objet
    Jeu "1" *-- "0..n" Coord
    Jeu "1" *-- "0..4" Joueur

    class Modele extends Observable {
        -CARTE: Carte
        -JEU: Jeu
        -iter: Iterator<Joueur>
        -tour: int
        -joueurActuel: Joueur
        -finJeu: boolean
        -difficulte: Difficulte
        +Modele(String, String, Difficulte)
        +restart(): void
        +setDifficulte(Difficulte): void
        -estDeterministe(): boolean
        +getJoueurActuel(): Joueur
        +getNbJoueurs(): int
        +tourSuivant(): void
        -commenceTour(): void
        +getTour(): int
        +getGrille(): Grille
        +verifieGagnants(): boolean
        -tousJoueursSurHelipad(): boolean
        -tousArtefactsRecuperes(): boolean
        +tourPeutFinir(): boolean
        -prochainJoueurVivant(): Joueur
        +tousJoueursMorts(): boolean
        +getFinJeu(): boolean
    }
    Modele "1" *-- "1" Carte
    Modele "1" *-- "1" Jeu
    Modele "1" o-- "1..4" Joueur

    package Exception {
        class InvalidGameException
    }
}

package Vue {
    class Utils {
        {static} +positionneGrille(int, int, int, int): GridBagConstraints
        {static} +positionneGrille(int, int, int): GridBagConstraints
        {static} +positionneGrille(int, int): GridBagConstraints
        {static} +tailleImg(ImageIcon, int, int): ImageIcon
        {static} +souligneLabel(String): String
    }
    class ConstsIcon
    class ConstsValue

    interface Observer {
        +metAJourApresAction(): void
    }
    Observable "0..n" o-- "0..n" Observer

    class Vue {
        -MODELE: Modele
        -FENETRE_JEU: JFrame
        -FENETRE_DEMARRAGE: JFrame
        +vue_start: VueStart
        +vue_info_haut: VueInfoHaut
        +vue_inventaires: VueContainerInventaires
        +vue_grille: VueGrille
        +vue_info_bas: VueInfoBas
        +afficheMenuDemarrage: boolean
        +Vue(Modele)
        +afficheFenetre(): void
        +commencer(): void
        +getFenetre(): JFrame
    }
    Vue "1" -- "1" Modele
    Vue "1" *-- "1" VueStart
    Vue "1" *-- "1" VueInfoHaut
    Vue "1" *-- "1" VueContainerInventaires
    Vue "1" *-- "1" VueGrille
    Vue "1" *-- "1" VueInfoBas
    Vue --- Utils

    class VueStart extends JPanel implements ContainerBoutonRadio {
        +id_difficulte_active: int
        +btn_facile: VueBoutonRadio
        +btn_normal: VueBoutonRadio
        +btn_difficile: VueBoutonRadio
        +btn_jouer: VueBouton
        +VueStart()
        -sousTitre(): JLabel
        +metAJourRadioBouton(int): void
        +metAJourRadioBouton(): void
    }
    VueStart "1" *-- "4" VueBoutonRadio
    VueStart "1" *-- "1" VueBouton
    VueStart "1" *-- "1" JLabel
    VueStart --- ConstsValue
    VueStart --- Utils

    class VueInfoHaut extends JPanel {
        -MODELE: Modele
        -LABEL_TOUR: JLabel
        +btn_aide: VueBouton
        +VueInfoHaut(Modele)
        +metAJourApresAction(): void
        -getTextTitre(): String
    }
    VueInfoHaut "1" --- "1" Modele
    VueInfoHaut "1" *-- "1" VueBouton
    VueInfoHaut --- ConstsValue

    class VueContainerInventaires extends JPanel {
        -MODELE: Modele
        +inventaires: VueInventaire[]
        +VueContainerInventaires(Modele)
        -afficheInventaires(): void
    }
    VueContainerInventaires "1" --- "1" Modele
    VueContainerInventaires "1" *-- "1..4" VueInventaire
    VueContainerInventaires --- ConstsValue

    class VueGrille extends JPanel {
        -WIDTH: int
        -HEIGHT: int
        -MODELE: Modele
        -GRILLE: VueCase[][]
        +VueGrille(Modele)
        -afficheGrille(): void
        +metAJourCase(Coord): void
        +metAJourDeplacementJoueur(Coord, Coord): void
    }
    VueGrille "1" --- "1" Modele
    VueGrille "1" *-- "0..n" VueCase
    VueGrille --- Utils
    VueGrille --- ConstsValue

    class VueInfoBas extends JPanel {
        -MODELE: Modele
        -CONTAINER: JPanel
        +vue_commande: VueCommande
        +vue_fin_jeu: VueFinJeu
        +vue_aide: VueAide
        +vue_log: VueLog
        -affiche_aide: boolean
        -est_fin_jeu: boolean
        +VueInfoBas(Modele)
        +verifieFinJeu(): boolean
        +affichePanneauAide(): void
    }
    VueInfoBas "1" *-- "1" JPanel
    VueInfoBas "1" *-- "1" VueCommande
    VueInfoBas "1" *-- "1" VueFinJeu
    VueInfoBas "1" *-- "1" VueAide
    VueInfoBas "1" *-- "1" VueLog
    VueInfoBas --- Utils

    interface ContainerBoutonRadio {
        +metAJourRadioBouton(int): void
        +metAJourRadioBouton(): void
    }

    class VueBouton extends JButton {
        +VueBouton(String)
        +VueBouton(String, String)
        +VueBouton(String, Icon)
        +VueBouton(String, String, Icon)
    }
    VueBouton --- ConstsValue

    class VueBoutonRadio extends VueBouton {
        -COLOR_ACTIVE: Color
        -ID: int
        +id_active: int
        +VueBoutonRadio(int, int, String, String)
        +estActive(): boolean
        +getID(): int
        +update(): void
    }
    VueBoutonRadio --- ConstsValue

    class VueInventaire extends JPanel {
        -MODELE: Modele
        -LABEL_NOM_JOUEUR: JLabel
        -PANEL_OBJETS: JPanel
        -NOM: String
        +VueInventaire(Modele, Joueur)
        +metAJourAffichageObjet(): void /' Ici, on construit VueObjet '/
        +remplieInventaireVide(): void
        +metAJourEtatJoueur(Joueur): void
    }
    VueInventaire "1" --- "1" Modele
    VueInventaire "1" --- "1" Joueur
    VueStart "1" *-- "1" JLabel
    VueStart "1" *-- "1" JPanel
    VueInventaire "1" *-- "0..n" VueObjet

    class VueObjet extends JPanel implements Observer {
        +VueObjet(Objet, Color, boolean)
        +VueObjet(Objet)
        +VueObjet(Objet, Color)
        +VueObjet(Objet, boolean)
    }
    VueObjet "1" --- "1" Objet
    VueObjet *-- JLabel
    VueObjet --- ConstsValue
    VueObjet --- ConstsIcon
    VueObjet --- Utils

    class VueCase extends JPanel implements Observer {
        -ICN_SIZEX: int
        -ICN_SIZEY: int
        -NB_JOUEURS: int
        -MODELE: Modele
        -CASE: Case
        -ICN_OBJET: JLabel
        +VueCase(Modele, Case)
        +metAJourApresAction(): void
        +paintComponent(Graphics): void
        -afficheUnJoueur(Joueur): void
        -afficheTousJoueurs(): void
        -afficheObjet(): void
        -colorieSol(Graphics): void
        +estCaseJoueur(): boolean
        -getJoueurs(): List<Joueur>
        -metAJourTailleIcon(): void
        -dessineCaseAdjacent(Graphics): void
    }
    VueCase "1" --- "1" Modele
    VueCase "1" --- "1" Case
    VueCase "1" --- "1" Joueur
    VueObjet *-- JLabel
    VueCase --- ConstsValue
    VueCase --- ConstsIcon
    VueCase --- Utils

    class VueCommande extends JPanel implements ContainerBoutonRadio {
        -MODELE: Modele
        +btn_clef: VueBouton
        +btn_prendre: VueBouton
        +btn_fin_tour: VueBouton
        +btn_secher: VueBoutonRadio
        +btn_sac_sable: VueBoutonRadio
        +btn_teleporte: VueBoutonRadio
        +VueCommande(Modele)
        +gereVisibiliteBoutons(): void
        -estCaseArtefact(): boolean
        -estAdjacentJoueurInondee(): boolean
        -titre(String): JLabel
        +metAJourRadioBouton(int): void
        +metAJourRadioBouton(): void
    }
    VueCommande "1" --- "1" Modele
    VueCommande "1" *-- "3" VueBouton
    VueCommande "1" *-- "3" VueBoutonRadio

    class VueFinJeu extends JPanel {
        +btn_rejouer: VueBouton
        +VueFinJeu(boolean)
    }
    VueCommande "1" *-- "1" VueBouton

    class VueAide extends JPanel {
        +VueAide()
        -getLabel(String): JLabel
        -getTitre(String): JLabel
    }

    class VueLog extends JPanel {
        -text_area: JTextArea
        -panel: JScrollPane
        +VueLog()
        +ajoutLog(String): void
    }
}

package Controleur {
    class Controleur implements ActionListener, KeyListener, MouseListener, MouseMotionListener {
        -MODELE: Modele
        -VUE: Vue
        -vue_commande: VueCommande
        -joueur: Joueur
        -est_presse_touche: boolean
        +Controleur(Modele, Vue)
        -metsAJourEventListener(): void
        +keyPressed(KeyEvent): void
        +mouseExited(MouseEvent): void
        +mouseMoved(MouseEvent): void
        +mousePressed(MouseEvent): void
        +actionPerformed(ActionEvent): void
        -deplaceJoueur(Direction): void
        -verifieFinJeu(): void
        -metAJourApresAction(): void
        -tourSuivant(): void
        -chercheClef(): void
        -prendArtefact(): void
        -getMouseCoord(int, int): Coord
        -getMouseCase(int, int): Case
        +keyReleased(KeyEvent): void
        +keyTyped(KeyEvent): void
        +mouseClicked(MouseEvent): void
        +mouseReleased(MouseEvent): void
        +mouseDragged(MouseEvent): void
        +mouseEntered(MouseEvent): void
    }
    Controleur "1" --- "1" Vue
    Controleur "1" --- "1" VueCommande
    Controleur "1" --- "1" Modele
    Controleur "1" --- "1" Joueur
}

@enduml