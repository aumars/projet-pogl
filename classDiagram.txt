@startuml
title L'Île Interdite - Diagramme de classe

class IleInterdite {
    {static} + main(): void
}
IleInterdite "1" *-- "1" Modele
IleInterdite "1" *-- "1" Vue
IleInterdite "1" *-- "1" Controleur


package Modele {
    abstract class Observable {
        -OBSERVERS: List<Observer>
        +Observable()
        +addObserver(Observer): void
    }
    Observable <-- Modele
    Observable "0..n" o-- "0..n" Observer

    enum Inondation {
        SECHE
        INONDEE
        SUBMERGEE
    }

    enum Direction {
        HAUT
        BAS
        GAUCHE
        DROITE
        NEUTRE
        +toString(): String
    }

    enum Element {
        AIRE
        EAU
        TERRE
        FEU
        +toString(): String
    }

    enum Terrain {
        TERRE
        MER
        HELIPAD
    }

    enum Difficulte {
        DETERMINISTE
        FACILE
        MOYEN
        DIFFICILE
    }

    abstract class Objet {
        -ELEMENT: element
        +Objet(Element)
        {abstract} +toString(): String
    }

    class Artefact {
        +Artefact(Element)
        +toString(): String
    }
    Objet <-- Artefact

    class Clef {
        +Clef(Element)
        +toString(): String
    }
    Objet <-- Clef

    class Coord {
        -x: int
        -y: int
        +Coord(int, int)
        +x(): int
        +y(): int
        +toString(): String
        +equals(Object): boolean
        +hashCode(): int
        +adjacent(Direction): Coord
        +estAdjacent(Coord): boolean
        +adjacentDir(Coord): Direction
    }

    class Case {
        +COORD: Coord
        +TERRAIN: Terrain
        -GRILLE: Grille
        -JOUEURS: List<Joueur>
        -etat: Inondation
        -objet: Objet
        -objetVisibilite: boolean
        +Case(Coord, Terrain, Grille)
        +restart(): void
        +setJoueur(Joueur): void
        +removeJoueur(Joueur): void
        +getJoueurs(): List<Joueur>
        +toString(): String
        +estTraversable(): boolean
        +estHelipad(): boolean
        +ajoutObjet(Objet): void
        +aObjet(): boolean
        +aObjet(Class<?>): boolean
        +getObjet(): Objet
        +getObjetVisibilite(): boolean
        +setObjetVisibilite(boolean): void
        +detruitObjet(): void
        +getEtat(): Inondation
        +setEtat(Inondation): void
        +asseche(): boolean
        +monteEaux(): void
        +adjacent(Direction): Case
        +adjacentSubmergee(): boolean
    }
    Case "0..1" o-- "1" Coord /' Case est associé à un Coord '/
    Case "0..1" -- "0..1" Objet /' Case est associé à un Objet '/

    class Grille {
        -CASES: Case[][]
        -ILE: Liste<Case>
        -HEIGHT: int
        -WIDTH: int
        +Grille(Terrain[][])
        +Grille(Terrain[][], List<SimpleImmutableEntry<Objet, Coord>>)
        -remplitIle(): void
        +restart(): void
        +addObjet(SimpleImmutableEntry<Objet, Coord>)
        +addObjet(Objet, Coord)
        +addObjets(List<SimpleImmutableEntry<Objet, Coord>>)
        +getWidth(): int
        +getHeight(): int
        +getCase(int, int): Case
        +getCase(Coord): Case
        +inonde(): void
    }
    Grille "1" *-- "Case"

    class Joueur {
        {static} -AVATARS: String[]
        {static} -numJoueurs: int
        +ID: int
        -INVENTAIRE: List<Objet>
        -vivant: boolean
        -pos: Case
        -posInitiale: Case
        -sonTour: boolean
        -actionSpeciale: boolean
        -casesSurvecuesConsecutives: int
        -probaClefInondation: double
        -log: String
        -actions: int
        +Joueur()
        +Joueur(Case)
        +restart(): void
        +toString(): String
        -log(String): void
        +setProbaClefInondation(double): void
        +meurt(): void
        +revive(): void
        +noie(): void
        +estVivant(): boolean
        +estSonTour(): boolean
        +finishTurn(): void
        +newTurn(): void
        +nbActions(): int
        +peutFaireAction(): boolean
        -finishAction(): void
        -gagneActionSpeciale(): void
        -finishActionSpeciale(): void
        +aActionSpeciale(): boolean
        +deplace(Direction): boolean
        +possedeClef(Element): boolean
        -prendObjet(): Objet
        +getInventaire(): List<Objet>
        +getCoord(): Coord
        +asseche(Direction): void
        +asseche(Case): void
        +recupereArtefact(): Objet
        +chercheCle(): Objet
        +teleport(Case): void
        +helicoptere(Case): void
        +setPosInitiale(Case): void
        +surCaseTraversable(): boolean
        +surHelipad(): boolean
        +getLogString(): String
    }
    Joueur "1" -- "0..n" Objet
    Case "0..1" -- "0..4" Joueur /' A modifier avec la liste de joueurs dans une case '/

    class Carte {
        +GRILLE: Grille
        +Carte(String)
        {static} -terrainByID(char): Terrain
    }
    Carte "1" *-- "1" Grille

    class Jeu {
        +OBJETS: List<SimpleImmutableEntry<Objet, Coord>>
        +ENSEMBLE: List<SimpleImmutableEntry<Joueur, Coord>>
        +Jeu(String)
        +Jeu(String, boolean)
        {static} -parseGame(String): Document
        {static} -parseGameObjet(Document}: List<SimpleImmutableEntry<Objet, Coord>>
        {static} -parseGameJoueur(Document): List<SimpleImmutableEntry<Joueur, Coord>>
        {static} -parsePosition(NodeList): Coord
        {static} -elementById(String): Element
        {static} -objetsByID(String): Objet
        {static} -joueurById(String): Joueur
    }
    Jeu "1" *-- "0..n" Objet
    Jeu "1" *-- "0..n" Coord
    Jeu "1" *-- "0..4" Joueur

    class Modele {
        -CARTE: Carte
        -JEU: Jeu
        -iter: Iterator<Joueur>
        -tour: int
        -joueurActuel: Joueur
        -finJeu: boolean
        -difficulte: Difficulte
        +Modele(String, String, Difficulte)
        +restart(): void
        +setDifficulte(Difficulte): void
        -estDeterministe(): boolean
        +getJoueurActuel(): Joueur
        +getNbJoueurs(): int
        +tourSuivant(): void
        -commenceTour(): void
        +getTour(): int
        +getGrille(): Grille
        +verifieGagnants(): boolean
        -tousJoueursSurHelipad(): boolean
        -tousArtefactsRecuperes(): boolean
        +tourPeutFinir(): boolean
        -prochainJoueurVivant(): Joueur
        +tousJoueursMorts(): boolean
        +getFinJeu(): boolean
    }
    Modele "1" *-- "1" Carte
    Modele "1" *-- "1" Jeu
    Modele "1" o-- "1..4" Joueur

    package Exception {
        class InvalidGameException
    }
}

package Vue {
    interface Observer
    Observer <-[dashed]- Vue

    class Vue
    Vue "1" -- "1" Modele

    class VueStart
    Vue "1" *-- "1" VueStart

    class VueInfoHaut
    Vue "1" *-- "1" VueInfoHaut
    VueInfoHaut "1" -- "1" Modele

    class VueContainerInventaires
    Vue "1" *-- "1" VueContainerInventaires
    VueContainerInventaires "1" -- "1" Modele

    class VueGrille
    Vue "1" *-- "1" VueGrille
    VueGrille "1" -- "1" Modele

    class VueInfoBas
    Vue "1" *-- "1" VueInfoBas

    interface ContainerBoutonRadio
    ContainerBoutonRadio <-[dashed]- VueStart

    class VueBoutonRadio
    VueStart "1" *-- "4" VueBoutonRadio

    class VueBouton
    VueStart "1" *-- "1" VueBouton
    VueInfoHaut "1" *-- "1" VueBouton

    class VueInventaire
    VueContainerInventaires "1" *-- "1..4" VueInventaire
    VueInventaire "1" -- "1" Modele
    VueInventaire "1" -- "1" Joueur

    class VueObjet
    VueInventaire "1" *-- "0..n" VueObjet
    VueObjet "1" -- "1" Objet

    class VueCase
    VueGrille "1" *-- "0..n" VueCase
    VueCase "1" -- "1" Modele
    VueCase "1" -- "1" Case

    class VueCommande
    VueInfoBas "1" *-- "1" VueCommande
    VueCommande "1" -- "1" Modele
    VueCommande "1" *-- "3" VueBouton
    VueCommande "1" *-- "3" VueBoutonRadio

    class VueFinJeu
    VueInfoBas "1" *-- "1" VueFinJeu

    class VueAide
    VueInfoBas "1" *-- "1" VueAide

    class VueLog
    VueInfoBas "1" *-- "1" VueLog

    class Utils
    class ConstIcon
    class ConstValue
}

package Controleur {
    class Controleur
    Controleur "1" -- "1" Vue
    Controleur "1" -- "1" VueCommande
    Controleur "1" -- "1" Modele
    Controleur "1" -- "1" Joueur
}

@enduml